c
!user.admin?
record.user_id
user.id
record.private
record.private?
user.blank?
c
!record.private
user
user.blank?
user.blank
c
user.blank?
c
!user.blank?
user
c
q
y
collaborator?
collaborator = true
collaborator? = true
wiki.collaborators.find_by(user_id: user.id)
wiki.collaborators.find_by(user_id: 99)
wiki.collaborators.find_by(user_id: user.id)
wiki.collaborators
wiki.collaborators.include?("Proxy")
wiki.collaborators.to_s.include?(12)
wiki.collaborators.include?(12)
wiki.collaborators.include?(wiki_id: 12)
wiki.collaborators.include?(user_id: 6)
wiki.collaborators.include?(user_id: 7)
wiki.collaborators
wiki.collaborators.include?(user_id: user.id)
user.id
wiki.collaborators.include?(user.id)
wiki.collaborators
user.id
c
Wiki.all
q
Wiki.all
Wikis.all
q
Wiki.all
wikis.all
all_wikis
c
scope.all
c
q
user.role
c
q
all_wikis = scope.all
all_wikis
user.role
c
cc
c
u.id
c
u.id
c
u.id
c
c\
c
u.id
c
u.id
c
@collaborator_list
c
params[:the_collaborators]
params
params[:the_collaborators]
c
params[:the_collaborators]
c
params
c
params[:the_collaborators]
params
c
params
c
current_user
@wiki
c
@wiki.user_id
current_user.id
c
sql
c
self.amount_billed
self.amount_refunded.blank?
self.amount_refunded
self
SELF
C
UNPROCESSED_REFUND
c
self
self.blank?
self.amount_refunded
self.amount_redunded
self.id
c
current_user.role
current_user
c
Date.today - 90.days
Date.today - 90
date.today - 90
@amount.updated_at
@amount_updated_at
@amount
c
@amount
q
c
q
c
Amount
c
@amount
c
upgrade_user.role
c
webstatus_to_code(:ok)
c
response.response_code
response.reponse_code
response
c
message
c
message
q
Faker::Hipster.sentence
Faker::Hipster.words(1)
Faker::Hipster.words
temp
"#{temp}".capitalize
temp.capitalize
temp
a.capitalize
a = "hello"
temp
c
record.private_changed?
q
record.private
record.title_changed?
record.name_changed?
record.body_changed?
record.private_changed?
c
user
record.private_changed?
c
record.private_changed?
user.id
record.user_id
user
c
"GET " + new_user_registration_path
c
new_user_registration_path
new_user_registration
c
my_user
my_user.confirmed
my_user.confirm
my_user.confirmation_token
my_user
c
it
dsf
it { should validate_presence_of(:name) }
c
my_user
c
my_user
c
my_user
c
:name
my_user
wikis
c
user.id
c
user
@record
record
@user
user
@user
current_user
user.exists?
user
user.exists?
user
user.exists?
user.id_exists?
record
scope.where(:id => record.id).exists?
user.id
user
current_user
record.id
scope.where(:id => record.id).exists?
c
current_user
scope.where(:id => record.id).exists?
q
c
record.user_id
user.id
c
q
record.user_id
user.id
c
user.id
record.user_id
record.private_changed?
c
record.private_changed?
c
record.private_changed?
c
record.private_changed?
c
q
x[:private_changed?]
x[:private].changed?
x[:private]
x = params.require(:wiki).permit(:title, :body, :private, :user_id)
params.require(:wiki).permit(:title, :body, :private, :user_id)
wiki_params
params[:body]
params[:title]
params
params[:title]
params[:id]
params
params[:private]
params[:private].changed?
record.private_changed?
q
instance.
params[:p
